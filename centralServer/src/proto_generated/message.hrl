%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1

-ifndef(message).
-define(message, true).

-define(message_gpb_version, "4.21.1").


-ifndef('REGISTERLOGINFORMAT_PB_H').
-define('REGISTERLOGINFORMAT_PB_H', true).
-record(registerLoginFormat,
        {userName = []          :: unicode:chardata() | undefined, % = 1, optional
         password = []          :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('ALBUM_PB_H').
-define('ALBUM_PB_H', true).
-record(album,
        {albumName = []         :: unicode:chardata() | undefined % = 1, optional
        }).
-endif.

-ifndef('GET_ALBUM_PB_H').
-define('GET_ALBUM_PB_H', true).
-record(get_album,
        {albumName = []         :: unicode:chardata() | undefined, % = 1, optional
         ip = []                :: unicode:chardata() | undefined, % = 2, optional
         port = 0               :: integer() | undefined % = 3, optional, 64 bits
        }).
-endif.

-ifndef('REPLY_MESSAGE_PB_H').
-define('REPLY_MESSAGE_PB_H', true).
-record(reply_message,
        {status = []            :: unicode:chardata() | undefined % = 1, optional
        }).
-endif.

-ifndef('VOTEVALUE_PB_H').
-define('VOTEVALUE_PB_H', true).
-record(voteValue,
        {sum = 0                :: integer() | undefined, % = 1, optional, 64 bits
         count = 0              :: integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('VOTEMAP_PB_H').
-define('VOTEMAP_PB_H', true).
-record(voteMap,
        {map = []               :: [{non_neg_integer(), message:voteValue()}] | undefined % = 1
        }).
-endif.

-ifndef('PEERINFO_PB_H').
-define('PEERINFO_PB_H', true).
-record(peerInfo,
        {ip = []                :: unicode:chardata() | undefined, % = 1, optional
         port = []              :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('NEWPEER_PB_H').
-define('NEWPEER_PB_H', true).
-record(newPeer,
        {name = []              :: unicode:chardata() | undefined, % = 1, optional
         ip = []                :: unicode:chardata() | undefined, % = 2, optional
         port = []              :: unicode:chardata() | undefined % = 3, optional
        }).
-endif.

-ifndef('DOTPAIR_PB_H').
-define('DOTPAIR_PB_H', true).
-record(dotPair,
        {id = 0                 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         version = 0            :: non_neg_integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('VOTEINFO_PB_H').
-define('VOTEINFO_PB_H', true).
-record(voteInfo,
        {sum = 0                :: non_neg_integer() | undefined, % = 1, optional, 64 bits
         count = 0              :: non_neg_integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('FILEINFO_PB_H').
-define('FILEINFO_PB_H', true).
-record(fileInfo,
        {votes = []             :: [{non_neg_integer(), message:voteInfo()}] | undefined, % = 1
         dotSet = []            :: [message:dotPair()] | undefined % = 2, repeated
        }).
-endif.

-ifndef('GROUPINFO_PB_H').
-define('GROUPINFO_PB_H', true).
-record(groupInfo,
        {dotSet = []            :: [message:dotPair()] | undefined % = 1, repeated
        }).
-endif.

-ifndef('CRDT_PB_H').
-define('CRDT_PB_H', true).
-record(crdt,
        {versionVector = []     :: [{non_neg_integer(), non_neg_integer()}] | undefined, % = 1
         files = []             :: [{unicode:chardata(), message:fileInfo()}] | undefined, % = 2
         groupUsers = []        :: [{unicode:chardata(), message:groupInfo()}] | undefined % = 3
        }).
-endif.

-ifndef('SESSIONSTART_PB_H').
-define('SESSIONSTART_PB_H', true).
-record(sessionStart,
        {id = 0                 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         crdt = undefined       :: message:crdt() | undefined, % = 2, optional
         sessionPeers = []      :: [{unicode:chardata(), message:peerInfo()}] | undefined, % = 3
         voteTable = []         :: [{unicode:chardata(), boolean() | 0 | 1}] | undefined % = 4
        }).
-endif.

-ifndef('QUITMESSAGE_PB_H').
-define('QUITMESSAGE_PB_H', true).
-record(quitMessage,
        {crdt = undefined       :: message:crdt() | undefined, % = 1, optional
         voteTable = []         :: [{unicode:chardata(), boolean() | 0 | 1}] | undefined % = 2
        }).
-endif.

-ifndef('MESSAGE_PB_H').
-define('MESSAGE_PB_H', true).
-record('Message',
        {type = register        :: register | login | logout | create | get | send | quit | reply | new_peer | peer_left | integer() | undefined, % = 1, optional, enum Type
         msg                    :: {m1, message:registerLoginFormat()} | {m2, message:album()} | {m3, message:sessionStart()} | {m4, message:quitMessage()} | {m5, message:reply_message()} | {m6, message:get_album()} | {m7, message:newPeer()} | undefined % oneof
        }).
-endif.

-endif.
