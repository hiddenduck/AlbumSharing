%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1

-ifndef(message).
-define(message, true).

-define(message_gpb_version, "4.21.1").


-ifndef('REGISTERLOGINFORMAT_PB_H').
-define('REGISTERLOGINFORMAT_PB_H', true).
-record(registerLoginFormat,
        {userName = []          :: unicode:chardata() | undefined, % = 1, optional
         password = []          :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('ALBUM_PB_H').
-define('ALBUM_PB_H', true).
-record(album,
        {albumName = []         :: unicode:chardata() | undefined % = 1, optional
        }).
-endif.

-ifndef('REPLY_MESSAGE_PB_H').
-define('REPLY_MESSAGE_PB_H', true).
-record(reply_message,
        {status = []            :: unicode:chardata() | undefined % = 1, optional
        }).
-endif.

-ifndef('VOTEVALUE_PB_H').
-define('VOTEVALUE_PB_H', true).
-record(voteValue,
        {sum = 0                :: integer() | undefined, % = 1, optional, 64 bits
         count = 0              :: integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('VOTEMAP_PB_H').
-define('VOTEMAP_PB_H', true).
-record(voteMap,
        {map = []               :: [{non_neg_integer(), message:voteValue()}] | undefined % = 1
        }).
-endif.

-ifndef('PEERINFO_PB_H').
-define('PEERINFO_PB_H', true).
-record(peerInfo,
        {id = 0                 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         ip = []                :: unicode:chardata() | undefined, % = 2, optional
         port = []              :: unicode:chardata() | undefined % = 3, optional
        }).
-endif.

-ifndef('SESSIONSTART_PB_H').
-define('SESSIONSTART_PB_H', true).
-record(sessionStart,
        {id = 0                 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         map = []               :: [{unicode:chardata(), message:voteMap()}] | undefined, % = 2
         peers = []             :: [unicode:chardata()] | undefined, % = 3, repeated
         sessionPeers = []      :: [message:peerInfo()] | undefined % = 4, repeated
        }).
-endif.

-ifndef('QUITMESSAGE_PB_H').
-define('QUITMESSAGE_PB_H', true).
-record(quitMessage,
        {map = []               :: [{unicode:chardata(), message:voteMap()}] | undefined, % = 1
         peers = []             :: [unicode:chardata()] | undefined % = 2, repeated
        }).
-endif.

-ifndef('MESSAGE_PB_H').
-define('MESSAGE_PB_H', true).
-record('Message',
        {type = register        :: register | login | logout | create | get | send | quit | reply | integer() | undefined, % = 1, optional, enum Type
         msg                    :: {m1, message:registerLoginFormat()} | {m2, message:album()} | {m3, message:sessionStart()} | {m4, message:quitMessage()} | {m5, message:reply_message()} | undefined % oneof
        }).
-endif.

-endif.
