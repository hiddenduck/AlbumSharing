%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: git
-module(message).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Type/1, enum_value_by_symbol_Type/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("message.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Type'() :: register | login | loginReply | create | get | send | quit | reply | new_peer | peer_left | newServer.
-export_type(['Type'/0]).

%% message types
-type 'ServerInfo'() :: #'ServerInfo'{}.

-type registerLoginFormat() :: #registerLoginFormat{}.

-type album() :: #album{}.

-type reply_message() :: #reply_message{}.

-type login_reply() :: #login_reply{}.

-type voteValue() :: #voteValue{}.

-type voteMap() :: #voteMap{}.

-type peerInfo() :: #peerInfo{}.

-type newPeer() :: #newPeer{}.

-type dotPair() :: #dotPair{}.

-type voteInfo() :: #voteInfo{}.

-type fileInfo() :: #fileInfo{}.

-type groupInfo() :: #groupInfo{}.

-type crdt() :: #crdt{}.

-type sessionStart() :: #sessionStart{}.

-type quitMessage() :: #quitMessage{}.

-type 'Message'() :: #'Message'{}.

-export_type(['ServerInfo'/0, 'registerLoginFormat'/0, 'album'/0, 'reply_message'/0, 'login_reply'/0, 'voteValue'/0, 'voteMap'/0, 'peerInfo'/0, 'newPeer'/0, 'dotPair'/0, 'voteInfo'/0, 'fileInfo'/0, 'groupInfo'/0, 'crdt'/0, 'sessionStart'/0, 'quitMessage'/0, 'Message'/0]).
-type '$msg_name'() :: 'ServerInfo' | registerLoginFormat | album | reply_message | login_reply | voteValue | voteMap | peerInfo | newPeer | dotPair | voteInfo | fileInfo | groupInfo | crdt | sessionStart | quitMessage | 'Message'.
-type '$msg'() :: 'ServerInfo'() | registerLoginFormat() | album() | reply_message() | login_reply() | voteValue() | voteMap() | peerInfo() | newPeer() | dotPair() | voteInfo() | fileInfo() | groupInfo() | crdt() | sessionStart() | quitMessage() | 'Message'().
-export_type(['$msg_name'/0, '$msg'/0]).

-record('map<uint32,uint64>',{key, value}).
-record('map<string,fileInfo>',{key, value}).
-record('map<string,groupInfo>',{key, value}).
-record('map<string,peerInfo>',{key, value}).
-record('map<uint32,voteValue>',{key, value}).
-record('map<string,bool>',{key, value}).
-record('map<uint32,voteInfo>',{key, value}).
-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ServerInfo' -> encode_msg_ServerInfo(id(Msg, TrUserData), TrUserData);
        registerLoginFormat -> encode_msg_registerLoginFormat(id(Msg, TrUserData), TrUserData);
        album -> encode_msg_album(id(Msg, TrUserData), TrUserData);
        reply_message -> encode_msg_reply_message(id(Msg, TrUserData), TrUserData);
        login_reply -> encode_msg_login_reply(id(Msg, TrUserData), TrUserData);
        voteValue -> encode_msg_voteValue(id(Msg, TrUserData), TrUserData);
        voteMap -> encode_msg_voteMap(id(Msg, TrUserData), TrUserData);
        peerInfo -> encode_msg_peerInfo(id(Msg, TrUserData), TrUserData);
        newPeer -> encode_msg_newPeer(id(Msg, TrUserData), TrUserData);
        dotPair -> encode_msg_dotPair(id(Msg, TrUserData), TrUserData);
        voteInfo -> encode_msg_voteInfo(id(Msg, TrUserData), TrUserData);
        fileInfo -> encode_msg_fileInfo(id(Msg, TrUserData), TrUserData);
        groupInfo -> encode_msg_groupInfo(id(Msg, TrUserData), TrUserData);
        crdt -> encode_msg_crdt(id(Msg, TrUserData), TrUserData);
        sessionStart -> encode_msg_sessionStart(id(Msg, TrUserData), TrUserData);
        quitMessage -> encode_msg_quitMessage(id(Msg, TrUserData), TrUserData);
        'Message' -> encode_msg_Message(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_ServerInfo(Msg, TrUserData) -> encode_msg_ServerInfo(Msg, <<>>, TrUserData).


encode_msg_ServerInfo(#'ServerInfo'{ip = F1, port = F2, my_hash = F3, inf_hash = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               case iolist_size(TrF4) of
                   0 -> B3;
                   _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
               end
           end
    end.

encode_msg_registerLoginFormat(Msg, TrUserData) -> encode_msg_registerLoginFormat(Msg, <<>>, TrUserData).


encode_msg_registerLoginFormat(#registerLoginFormat{userName = F1, password = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_album(Msg, TrUserData) -> encode_msg_album(Msg, <<>>, TrUserData).


encode_msg_album(#album{albumName = F1, port = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_reply_message(Msg, TrUserData) -> encode_msg_reply_message(Msg, <<>>, TrUserData).


encode_msg_reply_message(#reply_message{status = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case is_empty_string(TrF1) of
                   true -> Bin;
                   false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_login_reply(Msg, TrUserData) -> encode_msg_login_reply(Msg, <<>>, TrUserData).


encode_msg_login_reply(#login_reply{status = F1, dataServers = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_login_reply_dataServers(TrF2, B1, TrUserData)
        end
    end.

encode_msg_voteValue(Msg, TrUserData) -> encode_msg_voteValue(Msg, <<>>, TrUserData).


encode_msg_voteValue(#voteValue{sum = F1, count = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_voteMap(Msg, TrUserData) -> encode_msg_voteMap(Msg, <<>>, TrUserData).


encode_msg_voteMap(#voteMap{map = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_voteMap_map(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_peerInfo(Msg, TrUserData) -> encode_msg_peerInfo(Msg, <<>>, TrUserData).


encode_msg_peerInfo(#peerInfo{ip = F1, port = F2, id = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_newPeer(Msg, TrUserData) -> encode_msg_newPeer(Msg, <<>>, TrUserData).


encode_msg_newPeer(#newPeer{name = F1, ip = F2, port = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_dotPair(Msg, TrUserData) -> encode_msg_dotPair(Msg, <<>>, TrUserData).


encode_msg_dotPair(#dotPair{id = F1, version = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_voteInfo(Msg, TrUserData) -> encode_msg_voteInfo(Msg, <<>>, TrUserData).


encode_msg_voteInfo(#voteInfo{sum = F1, count = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_fileInfo(Msg, TrUserData) -> encode_msg_fileInfo(Msg, <<>>, TrUserData).


encode_msg_fileInfo(#fileInfo{votes = F1, dotSet = F2, fileHash = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_fileInfo_votes(TrF1, Bin, TrUserData)
             end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_fileInfo_dotSet(TrF2, B1, TrUserData)
             end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_groupInfo(Msg, TrUserData) -> encode_msg_groupInfo(Msg, <<>>, TrUserData).


encode_msg_groupInfo(#groupInfo{dotSet = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_groupInfo_dotSet(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_crdt(Msg, TrUserData) -> encode_msg_crdt(Msg, <<>>, TrUserData).


encode_msg_crdt(#crdt{versionVector = F1, files = F2, groupUsers = F3, id = F4}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_crdt_versionVector(TrF1, Bin, TrUserData)
             end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_crdt_files(TrF2, B1, TrUserData)
             end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_crdt_groupUsers(TrF3, B2, TrUserData)
             end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= 0 -> B3;
                  true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
               end
           end
    end.

encode_msg_sessionStart(Msg, TrUserData) -> encode_msg_sessionStart(Msg, <<>>, TrUserData).


encode_msg_sessionStart(#sessionStart{id = F1, crdt = F2, sessionPeers = F3, voteTable = F4, status = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= undefined -> B1;
                       true -> e_mfield_sessionStart_crdt(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_sessionStart_sessionPeers(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_sessionStart_voteTable(TrF4, B3, TrUserData)
             end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               case is_empty_string(TrF5) of
                   true -> B4;
                   false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
               end
           end
    end.

encode_msg_quitMessage(Msg, TrUserData) -> encode_msg_quitMessage(Msg, <<>>, TrUserData).


encode_msg_quitMessage(#quitMessage{crdt = F1, voteTable = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true -> e_mfield_quitMessage_crdt(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_quitMessage_voteTable(TrF2, B1, TrUserData)
        end
    end.

encode_msg_Message(Msg, TrUserData) -> encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#'Message'{type = F1, msg = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= register; TrF1 =:= 0 -> Bin;
                       true -> e_enum_Type(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 =:= undefined -> B1;
       true ->
           case id(F2, TrUserData) of
               {m1, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m1(TrTF2, <<B1/binary, 18>>, TrUserData) end;
               {m2, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m2(TrTF2, <<B1/binary, 26>>, TrUserData) end;
               {m3, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m3(TrTF2, <<B1/binary, 34>>, TrUserData) end;
               {m4, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m4(TrTF2, <<B1/binary, 42>>, TrUserData) end;
               {m5, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m5(TrTF2, <<B1/binary, 50>>, TrUserData) end;
               {m6, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m6(TrTF2, <<B1/binary, 58>>, TrUserData) end;
               {m7, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_Message_m7(TrTF2, <<B1/binary, 66>>, TrUserData) end
           end
    end.

e_mfield_login_reply_dataServers(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_peerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_login_reply_dataServers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_login_reply_dataServers(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_login_reply_dataServers(Rest, Bin3, TrUserData);
e_field_login_reply_dataServers([], Bin, _TrUserData) -> Bin.

e_mfield_voteMap_map(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<uint32,voteValue>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_voteMap_map([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_voteMap_map('tr_encode_voteMap.map[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_voteMap_map(Rest, Bin3, TrUserData);
e_field_voteMap_map([], Bin, _TrUserData) -> Bin.

e_mfield_fileInfo_votes(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<uint32,voteInfo>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_fileInfo_votes([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_fileInfo_votes('tr_encode_fileInfo.votes[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_fileInfo_votes(Rest, Bin3, TrUserData);
e_field_fileInfo_votes([], Bin, _TrUserData) -> Bin.

e_mfield_fileInfo_dotSet(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_dotPair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_fileInfo_dotSet([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_fileInfo_dotSet(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_fileInfo_dotSet(Rest, Bin3, TrUserData);
e_field_fileInfo_dotSet([], Bin, _TrUserData) -> Bin.

e_mfield_groupInfo_dotSet(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_dotPair(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_groupInfo_dotSet([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_groupInfo_dotSet(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_groupInfo_dotSet(Rest, Bin3, TrUserData);
e_field_groupInfo_dotSet([], Bin, _TrUserData) -> Bin.

e_mfield_crdt_versionVector(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<uint32,uint64>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_crdt_versionVector([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_crdt_versionVector('tr_encode_crdt.versionVector[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_crdt_versionVector(Rest, Bin3, TrUserData);
e_field_crdt_versionVector([], Bin, _TrUserData) -> Bin.

e_mfield_crdt_files(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,fileInfo>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_crdt_files([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_crdt_files('tr_encode_crdt.files[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_crdt_files(Rest, Bin3, TrUserData);
e_field_crdt_files([], Bin, _TrUserData) -> Bin.

e_mfield_crdt_groupUsers(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,groupInfo>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_crdt_groupUsers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_crdt_groupUsers('tr_encode_crdt.groupUsers[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_crdt_groupUsers(Rest, Bin3, TrUserData);
e_field_crdt_groupUsers([], Bin, _TrUserData) -> Bin.

e_mfield_sessionStart_crdt(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_sessionStart_sessionPeers(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,peerInfo>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_sessionStart_sessionPeers([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_sessionStart_sessionPeers('tr_encode_sessionStart.sessionPeers[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_sessionStart_sessionPeers(Rest, Bin3, TrUserData);
e_field_sessionStart_sessionPeers([], Bin, _TrUserData) -> Bin.

e_mfield_sessionStart_voteTable(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,bool>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_sessionStart_voteTable([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_sessionStart_voteTable('tr_encode_sessionStart.voteTable[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_sessionStart_voteTable(Rest, Bin3, TrUserData);
e_field_sessionStart_voteTable([], Bin, _TrUserData) -> Bin.

e_mfield_quitMessage_crdt(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_crdt(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_quitMessage_voteTable(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,bool>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_quitMessage_voteTable([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_quitMessage_voteTable('tr_encode_quitMessage.voteTable[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_quitMessage_voteTable(Rest, Bin3, TrUserData);
e_field_quitMessage_voteTable([], Bin, _TrUserData) -> Bin.

e_mfield_Message_m1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_registerLoginFormat(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m2(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_album(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m3(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_sessionStart(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m4(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_quitMessage(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m5(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_reply_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m6(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_login_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_m7(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_newPeer(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<uint32,uint64>'(#'map<uint32,uint64>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end.

'encode_msg_map<string,fileInfo>'(#'map<string,fileInfo>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<string,fileInfo>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<string,groupInfo>'(#'map<string,groupInfo>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<string,groupInfo>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<string,peerInfo>'(#'map<string,peerInfo>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<string,peerInfo>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<uint32,voteValue>'(#'map<uint32,voteValue>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<uint32,voteValue>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'encode_msg_map<string,bool>'(#'map<string,bool>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end.

'encode_msg_map<uint32,voteInfo>'(#'map<uint32,voteInfo>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), 'e_mfield_map<uint32,voteInfo>_value'(TrF2, <<B1/binary, 18>>, TrUserData) end.

'e_mfield_map<string,fileInfo>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_fileInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<string,groupInfo>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_groupInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<string,peerInfo>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_peerInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<uint32,voteValue>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_voteValue(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<uint32,voteInfo>_value'(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_voteInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_Type(register, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_Type(login, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_Type(loginReply, Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_Type(create, Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_Type(get, Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_Type(send, Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_Type(quit, Bin, _TrUserData) -> <<Bin/binary, 6>>;
e_enum_Type(reply, Bin, _TrUserData) -> <<Bin/binary, 7>>;
e_enum_Type(new_peer, Bin, _TrUserData) -> <<Bin/binary, 8>>;
e_enum_Type(peer_left, Bin, _TrUserData) -> <<Bin/binary, 9>>;
e_enum_Type(newServer, Bin, _TrUserData) -> <<Bin/binary, 10>>;
e_enum_Type(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
-dialyzer({nowarn_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ServerInfo', Bin, TrUserData) -> id(decode_msg_ServerInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(registerLoginFormat, Bin, TrUserData) -> id(decode_msg_registerLoginFormat(Bin, TrUserData), TrUserData);
decode_msg_2_doit(album, Bin, TrUserData) -> id(decode_msg_album(Bin, TrUserData), TrUserData);
decode_msg_2_doit(reply_message, Bin, TrUserData) -> id(decode_msg_reply_message(Bin, TrUserData), TrUserData);
decode_msg_2_doit(login_reply, Bin, TrUserData) -> id(decode_msg_login_reply(Bin, TrUserData), TrUserData);
decode_msg_2_doit(voteValue, Bin, TrUserData) -> id(decode_msg_voteValue(Bin, TrUserData), TrUserData);
decode_msg_2_doit(voteMap, Bin, TrUserData) -> id(decode_msg_voteMap(Bin, TrUserData), TrUserData);
decode_msg_2_doit(peerInfo, Bin, TrUserData) -> id(decode_msg_peerInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(newPeer, Bin, TrUserData) -> id(decode_msg_newPeer(Bin, TrUserData), TrUserData);
decode_msg_2_doit(dotPair, Bin, TrUserData) -> id(decode_msg_dotPair(Bin, TrUserData), TrUserData);
decode_msg_2_doit(voteInfo, Bin, TrUserData) -> id(decode_msg_voteInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(fileInfo, Bin, TrUserData) -> id(decode_msg_fileInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(groupInfo, Bin, TrUserData) -> id(decode_msg_groupInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(crdt, Bin, TrUserData) -> id(decode_msg_crdt(Bin, TrUserData), TrUserData);
decode_msg_2_doit(sessionStart, Bin, TrUserData) -> id(decode_msg_sessionStart(Bin, TrUserData), TrUserData);
decode_msg_2_doit(quitMessage, Bin, TrUserData) -> id(decode_msg_quitMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Message', Bin, TrUserData) -> id(decode_msg_Message(Bin, TrUserData), TrUserData).



decode_msg_ServerInfo(Bin, TrUserData) -> dfp_read_field_def_ServerInfo(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ServerInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerInfo_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerInfo_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerInfo_my_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerInfo(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerInfo_inf_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ServerInfo'{ip = F@_1, port = F@_2, my_hash = F@_3, inf_hash = F@_4};
dfp_read_field_def_ServerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_ServerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ServerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_ServerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ServerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ServerInfo_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_ServerInfo_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_ServerInfo_my_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_ServerInfo_inf_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_ServerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_ServerInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ServerInfo'{ip = F@_1, port = F@_2, my_hash = F@_3, inf_hash = F@_4}.

d_field_ServerInfo_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerInfo_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerInfo_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ServerInfo_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerInfo_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerInfo_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_ServerInfo_my_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerInfo_my_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerInfo_my_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_ServerInfo_inf_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerInfo_inf_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerInfo_inf_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_ServerInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ServerInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ServerInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ServerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_ServerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_ServerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_ServerInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_ServerInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_ServerInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_registerLoginFormat(Bin, TrUserData) -> dfp_read_field_def_registerLoginFormat(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_registerLoginFormat(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_registerLoginFormat_userName(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_registerLoginFormat(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_registerLoginFormat_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_registerLoginFormat(<<>>, 0, 0, _, F@_1, F@_2, _) -> #registerLoginFormat{userName = F@_1, password = F@_2};
dfp_read_field_def_registerLoginFormat(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_registerLoginFormat(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_registerLoginFormat(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_registerLoginFormat(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_registerLoginFormat(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_registerLoginFormat_userName(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_registerLoginFormat_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_registerLoginFormat(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_registerLoginFormat(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_registerLoginFormat(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_registerLoginFormat(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_registerLoginFormat(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_registerLoginFormat(<<>>, 0, 0, _, F@_1, F@_2, _) -> #registerLoginFormat{userName = F@_1, password = F@_2}.

d_field_registerLoginFormat_userName(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_registerLoginFormat_userName(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_registerLoginFormat_userName(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_registerLoginFormat(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_registerLoginFormat_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_registerLoginFormat_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_registerLoginFormat_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_registerLoginFormat(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_registerLoginFormat(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_registerLoginFormat(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_registerLoginFormat(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_registerLoginFormat(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_registerLoginFormat(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_registerLoginFormat(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_registerLoginFormat(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_registerLoginFormat(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_registerLoginFormat(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_registerLoginFormat(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_registerLoginFormat(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_registerLoginFormat(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_registerLoginFormat(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_registerLoginFormat(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_album(Bin, TrUserData) -> dfp_read_field_def_album(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_album(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_album_albumName(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_album(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_album_port(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_album(<<>>, 0, 0, _, F@_1, F@_2, _) -> #album{albumName = F@_1, port = F@_2};
dfp_read_field_def_album(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_album(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_album(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_album(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_album(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_album_albumName(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_album_port(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_album(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_album(<<>>, 0, 0, _, F@_1, F@_2, _) -> #album{albumName = F@_1, port = F@_2}.

d_field_album_albumName(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_album_albumName(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_album_albumName(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_album(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_album_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_album_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_album_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_album(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_album(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_album(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_album(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_album(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_album(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_album(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_album(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_album(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_album(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_album(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_album(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_reply_message(Bin, TrUserData) -> dfp_read_field_def_reply_message(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_reply_message(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_reply_message_status(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_reply_message(<<>>, 0, 0, _, F@_1, _) -> #reply_message{status = F@_1};
dfp_read_field_def_reply_message(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_reply_message(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_reply_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_reply_message(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_reply_message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_reply_message_status(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_reply_message(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_reply_message(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_reply_message(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_reply_message(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_reply_message(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_reply_message(<<>>, 0, 0, _, F@_1, _) -> #reply_message{status = F@_1}.

d_field_reply_message_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_reply_message_status(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_reply_message_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_reply_message(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_reply_message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_reply_message(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_reply_message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_reply_message(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_reply_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_reply_message(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_reply_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_reply_message(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_reply_message(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_reply_message(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_reply_message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_reply_message(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_reply_message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_reply_message(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_login_reply(Bin, TrUserData) -> dfp_read_field_def_login_reply(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_login_reply(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_login_reply_status(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_login_reply(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_login_reply_dataServers(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_login_reply(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #login_reply{status = F@_1, dataServers = lists_reverse(R1, TrUserData)};
dfp_read_field_def_login_reply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_login_reply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_login_reply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_login_reply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_login_reply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_login_reply_status(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_login_reply_dataServers(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_login_reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_login_reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_login_reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_login_reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_login_reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_login_reply(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #login_reply{status = F@_1, dataServers = lists_reverse(R1, TrUserData)}.

d_field_login_reply_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_login_reply_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_login_reply_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_login_reply(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_login_reply_dataServers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_login_reply_dataServers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_login_reply_dataServers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_peerInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_login_reply(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_login_reply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_login_reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_login_reply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_login_reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_login_reply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_login_reply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_login_reply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_reply(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_login_reply(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_reply(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_login_reply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_login_reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_login_reply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_login_reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_voteValue(Bin, TrUserData) -> dfp_read_field_def_voteValue(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_voteValue(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_voteValue_sum(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_voteValue(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_voteValue_count(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_voteValue(<<>>, 0, 0, _, F@_1, F@_2, _) -> #voteValue{sum = F@_1, count = F@_2};
dfp_read_field_def_voteValue(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_voteValue(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_voteValue(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_voteValue(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_voteValue(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_voteValue_sum(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_voteValue_count(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_voteValue(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_voteValue(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_voteValue(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_voteValue(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_voteValue(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_voteValue(<<>>, 0, 0, _, F@_1, F@_2, _) -> #voteValue{sum = F@_1, count = F@_2}.

d_field_voteValue_sum(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_voteValue_sum(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_voteValue_sum(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_voteValue(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_voteValue_count(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_voteValue_count(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_voteValue_count(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_voteValue(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_voteValue(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_voteValue(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_voteValue(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteValue(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_voteValue(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_voteValue(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_voteValue(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_voteValue(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_voteValue(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_voteValue(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_voteValue(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteValue(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_voteValue(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteValue(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_voteMap(Bin, TrUserData) -> dfp_read_field_def_voteMap(Bin, 0, 0, 0, 'tr_decode_init_default_voteMap.map'([], TrUserData), TrUserData).

dfp_read_field_def_voteMap(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_voteMap_map(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_voteMap(<<>>, 0, 0, _, R1, TrUserData) -> #voteMap{map = 'tr_decode_repeated_finalize_voteMap.map'(R1, TrUserData)};
dfp_read_field_def_voteMap(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_voteMap(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_voteMap(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_voteMap(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_voteMap(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_voteMap_map(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_voteMap(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_voteMap(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_voteMap(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_voteMap(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_voteMap(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_voteMap(<<>>, 0, 0, _, R1, TrUserData) -> #voteMap{map = 'tr_decode_repeated_finalize_voteMap.map'(R1, TrUserData)}.

d_field_voteMap_map(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_voteMap_map(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_voteMap_map(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<uint32,voteValue>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_voteMap(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_voteMap.map'(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_voteMap(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_voteMap(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_voteMap(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_voteMap(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_voteMap(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_voteMap(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_voteMap(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_voteMap(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_voteMap(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_voteMap(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_voteMap(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_voteMap(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_voteMap(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_voteMap(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_peerInfo(Bin, TrUserData) -> dfp_read_field_def_peerInfo(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_peerInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_peerInfo_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_peerInfo(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_peerInfo_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_peerInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_peerInfo_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_peerInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #peerInfo{ip = F@_1, port = F@_2, id = F@_3};
dfp_read_field_def_peerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_peerInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_peerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_peerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_peerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_peerInfo_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_peerInfo_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_peerInfo_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_peerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_peerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_peerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_peerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_peerInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_peerInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #peerInfo{ip = F@_1, port = F@_2, id = F@_3}.

d_field_peerInfo_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_peerInfo_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_peerInfo_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_peerInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_peerInfo_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_peerInfo_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_peerInfo_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_peerInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_peerInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_peerInfo_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_peerInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_peerInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_peerInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_peerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_peerInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_peerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_peerInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_peerInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_peerInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_peerInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_peerInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_peerInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_peerInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_peerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_peerInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_peerInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_newPeer(Bin, TrUserData) -> dfp_read_field_def_newPeer(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_newPeer(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_newPeer_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_newPeer(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_newPeer_ip(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_newPeer(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_newPeer_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_newPeer(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #newPeer{name = F@_1, ip = F@_2, port = F@_3};
dfp_read_field_def_newPeer(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_newPeer(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_newPeer(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_newPeer(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_newPeer(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_newPeer_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_newPeer_ip(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_newPeer_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_newPeer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_newPeer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_newPeer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_newPeer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_newPeer(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_newPeer(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #newPeer{name = F@_1, ip = F@_2, port = F@_3}.

d_field_newPeer_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_newPeer_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_newPeer_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_newPeer(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_newPeer_ip(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_newPeer_ip(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_newPeer_ip(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_newPeer(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_newPeer_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_newPeer_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_newPeer_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_newPeer(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_newPeer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_newPeer(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_newPeer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_newPeer(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_newPeer(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_newPeer(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_newPeer(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_newPeer(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_newPeer(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_newPeer(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_newPeer(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_newPeer(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_newPeer(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_newPeer(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_dotPair(Bin, TrUserData) -> dfp_read_field_def_dotPair(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_dotPair(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_dotPair_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_dotPair(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_dotPair_version(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_dotPair(<<>>, 0, 0, _, F@_1, F@_2, _) -> #dotPair{id = F@_1, version = F@_2};
dfp_read_field_def_dotPair(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_dotPair(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_dotPair(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_dotPair(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_dotPair(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_dotPair_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_dotPair_version(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_dotPair(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_dotPair(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_dotPair(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_dotPair(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_dotPair(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_dotPair(<<>>, 0, 0, _, F@_1, F@_2, _) -> #dotPair{id = F@_1, version = F@_2}.

d_field_dotPair_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_dotPair_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_dotPair_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_dotPair(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_dotPair_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_dotPair_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_dotPair_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_dotPair(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_dotPair(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_dotPair(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_dotPair(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_dotPair(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_dotPair(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_dotPair(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_dotPair(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dotPair(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_dotPair(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_dotPair(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_dotPair(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_dotPair(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_dotPair(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_dotPair(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_voteInfo(Bin, TrUserData) -> dfp_read_field_def_voteInfo(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_voteInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_voteInfo_sum(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_voteInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_voteInfo_count(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_voteInfo(<<>>, 0, 0, _, F@_1, F@_2, _) -> #voteInfo{sum = F@_1, count = F@_2};
dfp_read_field_def_voteInfo(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_voteInfo(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_voteInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_voteInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_voteInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_voteInfo_sum(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_voteInfo_count(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_voteInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_voteInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_voteInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_voteInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_voteInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_voteInfo(<<>>, 0, 0, _, F@_1, F@_2, _) -> #voteInfo{sum = F@_1, count = F@_2}.

d_field_voteInfo_sum(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_voteInfo_sum(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_voteInfo_sum(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_voteInfo(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_voteInfo_count(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_voteInfo_count(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_voteInfo_count(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_voteInfo(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_voteInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_voteInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_voteInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_voteInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_voteInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_voteInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_voteInfo(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_voteInfo(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_voteInfo(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_voteInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_voteInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_voteInfo(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_fileInfo(Bin, TrUserData) -> dfp_read_field_def_fileInfo(Bin, 0, 0, 0, 'tr_decode_init_default_fileInfo.votes'([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_fileInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_fileInfo_votes(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_fileInfo(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_fileInfo_dotSet(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_fileInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_fileInfo_fileHash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_fileInfo(<<>>, 0, 0, _, R1, R2, F@_3, TrUserData) -> #fileInfo{votes = 'tr_decode_repeated_finalize_fileInfo.votes'(R1, TrUserData), dotSet = lists_reverse(R2, TrUserData), fileHash = F@_3};
dfp_read_field_def_fileInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_fileInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_fileInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_fileInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_fileInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_fileInfo_votes(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_fileInfo_dotSet(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_fileInfo_fileHash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_fileInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_fileInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_fileInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_fileInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_fileInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_fileInfo(<<>>, 0, 0, _, R1, R2, F@_3, TrUserData) -> #fileInfo{votes = 'tr_decode_repeated_finalize_fileInfo.votes'(R1, TrUserData), dotSet = lists_reverse(R2, TrUserData), fileHash = F@_3}.

d_field_fileInfo_votes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_fileInfo_votes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_fileInfo_votes(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<uint32,voteInfo>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_fileInfo(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_fileInfo.votes'(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_fileInfo_dotSet(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_fileInfo_dotSet(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_fileInfo_dotSet(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_dotPair(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_fileInfo(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, TrUserData).

d_field_fileInfo_fileHash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_fileInfo_fileHash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_fileInfo_fileHash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_fileInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_fileInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_fileInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_fileInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_fileInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_fileInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_fileInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_fileInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_fileInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_fileInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_fileInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_fileInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_fileInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_fileInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_fileInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_groupInfo(Bin, TrUserData) -> dfp_read_field_def_groupInfo(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_groupInfo(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_groupInfo_dotSet(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_groupInfo(<<>>, 0, 0, _, R1, TrUserData) -> #groupInfo{dotSet = lists_reverse(R1, TrUserData)};
dfp_read_field_def_groupInfo(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_groupInfo(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_groupInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_groupInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_groupInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_groupInfo_dotSet(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_groupInfo(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_groupInfo(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_groupInfo(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_groupInfo(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_groupInfo(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_groupInfo(<<>>, 0, 0, _, R1, TrUserData) -> #groupInfo{dotSet = lists_reverse(R1, TrUserData)}.

d_field_groupInfo_dotSet(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_groupInfo_dotSet(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_groupInfo_dotSet(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_dotPair(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_groupInfo(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_groupInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_groupInfo(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_groupInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_groupInfo(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_groupInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_groupInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_groupInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_groupInfo(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_groupInfo(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_groupInfo(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_groupInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_groupInfo(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_groupInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_groupInfo(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_crdt(Bin, TrUserData) ->
    dfp_read_field_def_crdt(Bin, 0, 0, 0, 'tr_decode_init_default_crdt.versionVector'([], TrUserData), 'tr_decode_init_default_crdt.files'([], TrUserData), 'tr_decode_init_default_crdt.groupUsers'([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_crdt(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_crdt_versionVector(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_crdt(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_crdt_files(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_crdt(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_crdt_groupUsers(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_crdt(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_crdt_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_crdt(<<>>, 0, 0, _, R1, R2, R3, F@_4, TrUserData) ->
    #crdt{versionVector = 'tr_decode_repeated_finalize_crdt.versionVector'(R1, TrUserData), files = 'tr_decode_repeated_finalize_crdt.files'(R2, TrUserData), groupUsers = 'tr_decode_repeated_finalize_crdt.groupUsers'(R3, TrUserData), id = F@_4};
dfp_read_field_def_crdt(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_crdt(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_crdt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_crdt(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_crdt(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_crdt_versionVector(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_crdt_files(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_crdt_groupUsers(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_crdt_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_crdt(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_crdt(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_crdt(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_crdt(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_crdt(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_crdt(<<>>, 0, 0, _, R1, R2, R3, F@_4, TrUserData) ->
    #crdt{versionVector = 'tr_decode_repeated_finalize_crdt.versionVector'(R1, TrUserData), files = 'tr_decode_repeated_finalize_crdt.files'(R2, TrUserData), groupUsers = 'tr_decode_repeated_finalize_crdt.groupUsers'(R3, TrUserData), id = F@_4}.

d_field_crdt_versionVector(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_crdt_versionVector(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_crdt_versionVector(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<uint32,uint64>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_crdt(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_crdt.versionVector'(NewFValue, Prev, TrUserData), F@_2, F@_3, F@_4, TrUserData).

d_field_crdt_files(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_crdt_files(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_crdt_files(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,fileInfo>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_crdt(RestF, 0, 0, F, F@_1, 'tr_decode_repeated_add_elem_crdt.files'(NewFValue, Prev, TrUserData), F@_3, F@_4, TrUserData).

d_field_crdt_groupUsers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_crdt_groupUsers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_crdt_groupUsers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,groupInfo>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_crdt(RestF, 0, 0, F, F@_1, F@_2, 'tr_decode_repeated_add_elem_crdt.groupUsers'(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_crdt_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_crdt_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_crdt_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_crdt(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_crdt(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_crdt(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_crdt(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_crdt(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_crdt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_crdt(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_crdt(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_crdt(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_crdt(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_crdt(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_crdt(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_crdt(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_crdt(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_crdt(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_sessionStart(Bin, TrUserData) ->
    dfp_read_field_def_sessionStart(Bin,
                                    0,
                                    0,
                                    0,
                                    id(0, TrUserData),
                                    id(undefined, TrUserData),
                                    'tr_decode_init_default_sessionStart.sessionPeers'([], TrUserData),
                                    'tr_decode_init_default_sessionStart.voteTable'([], TrUserData),
                                    id([], TrUserData),
                                    TrUserData).

dfp_read_field_def_sessionStart(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_sessionStart_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sessionStart(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_sessionStart_crdt(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sessionStart(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_sessionStart_sessionPeers(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sessionStart(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_sessionStart_voteTable(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sessionStart(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_sessionStart_status(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_sessionStart(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, TrUserData) ->
    #sessionStart{id = F@_1, crdt = F@_2, sessionPeers = 'tr_decode_repeated_finalize_sessionStart.sessionPeers'(R1, TrUserData), voteTable = 'tr_decode_repeated_finalize_sessionStart.voteTable'(R2, TrUserData), status = F@_5};
dfp_read_field_def_sessionStart(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_sessionStart(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_sessionStart(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_sessionStart(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_sessionStart(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_sessionStart_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_sessionStart_crdt(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_sessionStart_sessionPeers(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_sessionStart_voteTable(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_sessionStart_status(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_sessionStart(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_sessionStart(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_sessionStart(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_sessionStart(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_sessionStart(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_sessionStart(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, TrUserData) ->
    #sessionStart{id = F@_1, crdt = F@_2, sessionPeers = 'tr_decode_repeated_finalize_sessionStart.sessionPeers'(R1, TrUserData), voteTable = 'tr_decode_repeated_finalize_sessionStart.voteTable'(R2, TrUserData), status = F@_5}.

d_field_sessionStart_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_sessionStart_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sessionStart_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_sessionStart(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_sessionStart_crdt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_sessionStart_crdt(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sessionStart_crdt(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_crdt(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_sessionStart(RestF,
                                    0,
                                    0,
                                    F,
                                    F@_1,
                                    if Prev == undefined -> NewFValue;
                                       true -> merge_msg_crdt(Prev, NewFValue, TrUserData)
                                    end,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    TrUserData).

d_field_sessionStart_sessionPeers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_sessionStart_sessionPeers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sessionStart_sessionPeers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,peerInfo>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_sessionStart(RestF, 0, 0, F, F@_1, F@_2, 'tr_decode_repeated_add_elem_sessionStart.sessionPeers'(NewFValue, Prev, TrUserData), F@_4, F@_5, TrUserData).

d_field_sessionStart_voteTable(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_sessionStart_voteTable(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sessionStart_voteTable(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,bool>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_sessionStart(RestF, 0, 0, F, F@_1, F@_2, F@_3, 'tr_decode_repeated_add_elem_sessionStart.voteTable'(NewFValue, Prev, TrUserData), F@_5, TrUserData).

d_field_sessionStart_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_sessionStart_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_sessionStart_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_sessionStart(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_sessionStart(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_sessionStart(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_sessionStart(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_sessionStart(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_sessionStart(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_sessionStart(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_sessionStart(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sessionStart(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_sessionStart(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sessionStart(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_sessionStart(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_sessionStart(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_sessionStart(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_sessionStart(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_quitMessage(Bin, TrUserData) -> dfp_read_field_def_quitMessage(Bin, 0, 0, 0, id(undefined, TrUserData), 'tr_decode_init_default_quitMessage.voteTable'([], TrUserData), TrUserData).

dfp_read_field_def_quitMessage(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_quitMessage_crdt(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_quitMessage(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_quitMessage_voteTable(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_quitMessage(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #quitMessage{crdt = F@_1, voteTable = 'tr_decode_repeated_finalize_quitMessage.voteTable'(R1, TrUserData)};
dfp_read_field_def_quitMessage(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_quitMessage(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_quitMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_quitMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_quitMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_quitMessage_crdt(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_quitMessage_voteTable(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_quitMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_quitMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_quitMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_quitMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_quitMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_quitMessage(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #quitMessage{crdt = F@_1, voteTable = 'tr_decode_repeated_finalize_quitMessage.voteTable'(R1, TrUserData)}.

d_field_quitMessage_crdt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_quitMessage_crdt(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_quitMessage_crdt(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_crdt(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_quitMessage(RestF,
                                   0,
                                   0,
                                   F,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_crdt(Prev, NewFValue, TrUserData)
                                   end,
                                   F@_2,
                                   TrUserData).

d_field_quitMessage_voteTable(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_quitMessage_voteTable(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_quitMessage_voteTable(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,bool>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_quitMessage(RestF, 0, 0, F, F@_1, 'tr_decode_repeated_add_elem_quitMessage.voteTable'(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_quitMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_quitMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_quitMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_quitMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_quitMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_quitMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_quitMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_quitMessage(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_quitMessage(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_quitMessage(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_quitMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_quitMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_quitMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_quitMessage(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_Message(Bin, TrUserData) -> dfp_read_field_def_Message(Bin, 0, 0, 0, id(register, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m1(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m2(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m3(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m4(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m5(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m6(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_m7(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Message'{type = F@_1, msg = F@_2};
dfp_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Message_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Message_m1(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        26 -> d_field_Message_m2(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        34 -> d_field_Message_m3(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        42 -> d_field_Message_m4(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        50 -> d_field_Message_m5(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        58 -> d_field_Message_m6(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        66 -> d_field_Message_m7(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Message'{type = F@_1, msg = F@_2}.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Type(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Message_m1(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m1(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m1(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_registerLoginFormat(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m1, NewFValue}, TrUserData);
                                   {m1, MVPrev} -> id({m1, merge_msg_registerLoginFormat(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m1, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m2(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m2(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m2(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_album(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m2, NewFValue}, TrUserData);
                                   {m2, MVPrev} -> id({m2, merge_msg_album(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m2, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m3(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m3(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m3(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_sessionStart(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m3, NewFValue}, TrUserData);
                                   {m3, MVPrev} -> id({m3, merge_msg_sessionStart(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m3, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m4(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m4(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m4(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_quitMessage(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m4, NewFValue}, TrUserData);
                                   {m4, MVPrev} -> id({m4, merge_msg_quitMessage(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m4, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m5(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m5(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m5(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_reply_message(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m5, NewFValue}, TrUserData);
                                   {m5, MVPrev} -> id({m5, merge_msg_reply_message(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m5, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m6(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m6(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m6(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_login_reply(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m6, NewFValue}, TrUserData);
                                   {m6, MVPrev} -> id({m6, merge_msg_login_reply(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m6, NewFValue}, TrUserData)
                               end,
                               TrUserData).

d_field_Message_m7(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_m7(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_m7(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_newPeer(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               case Prev of
                                   undefined -> id({m7, NewFValue}, TrUserData);
                                   {m7, MVPrev} -> id({m7, merge_msg_newPeer(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                   _ -> id({m7, NewFValue}, TrUserData)
                               end,
                               TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Message(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<uint32,uint64>'(Bin, TrUserData) -> 'dfp_read_field_def_map<uint32,uint64>'(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<uint32,uint64>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,uint64>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint64>'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,uint64>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,uint64>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,uint64>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<uint32,uint64>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<uint32,uint64>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<uint32,uint64>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<uint32,uint64>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<uint32,uint64>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<uint32,uint64>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_map<uint32,uint64>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<uint32,uint64>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<uint32,uint64>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<uint32,uint64>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<uint32,uint64>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<uint32,uint64>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<uint32,uint64>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,uint64>'{key = F@_1, value = F@_2}.

'd_field_map<uint32,uint64>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,uint64>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint64>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,uint64>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<uint32,uint64>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,uint64>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,uint64>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,uint64>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<uint32,uint64>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<uint32,uint64>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<uint32,uint64>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<uint32,uint64>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<uint32,uint64>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<uint32,uint64>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<uint32,uint64>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<uint32,uint64>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<uint32,uint64>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<uint32,uint64>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<uint32,uint64>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,uint64>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,fileInfo>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,fileInfo>'(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_map<string,fileInfo>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,fileInfo>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,fileInfo>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,fileInfo>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,fileInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,fileInfo>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,fileInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,fileInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,fileInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,fileInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,fileInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,fileInfo>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,fileInfo>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,fileInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,fileInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,fileInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,fileInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,fileInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,fileInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,fileInfo>'{key = F@_1, value = F@_2}.

'd_field_map<string,fileInfo>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,fileInfo>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,fileInfo>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,fileInfo>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,fileInfo>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,fileInfo>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,fileInfo>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_fileInfo(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,fileInfo>'(RestF,
                                              0,
                                              0,
                                              F,
                                              F@_1,
                                              if Prev == undefined -> NewFValue;
                                                 true -> merge_msg_fileInfo(Prev, NewFValue, TrUserData)
                                              end,
                                              TrUserData).

'skip_varint_map<string,fileInfo>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,fileInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,fileInfo>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,fileInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,fileInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,fileInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,fileInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,fileInfo>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,fileInfo>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,fileInfo>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,fileInfo>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,fileInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,fileInfo>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,fileInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,groupInfo>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,groupInfo>'(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_map<string,groupInfo>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,groupInfo>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,groupInfo>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,groupInfo>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,groupInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,groupInfo>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,groupInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,groupInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,groupInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,groupInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,groupInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,groupInfo>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,groupInfo>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,groupInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,groupInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,groupInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,groupInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,groupInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,groupInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,groupInfo>'{key = F@_1, value = F@_2}.

'd_field_map<string,groupInfo>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,groupInfo>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,groupInfo>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,groupInfo>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,groupInfo>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,groupInfo>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,groupInfo>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_groupInfo(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,groupInfo>'(RestF,
                                               0,
                                               0,
                                               F,
                                               F@_1,
                                               if Prev == undefined -> NewFValue;
                                                  true -> merge_msg_groupInfo(Prev, NewFValue, TrUserData)
                                               end,
                                               TrUserData).

'skip_varint_map<string,groupInfo>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,groupInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,groupInfo>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,groupInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,groupInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,groupInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,groupInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,groupInfo>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,groupInfo>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,groupInfo>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,groupInfo>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,groupInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,groupInfo>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,groupInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,peerInfo>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,peerInfo>'(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_map<string,peerInfo>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,peerInfo>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,peerInfo>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,peerInfo>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,peerInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,peerInfo>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,peerInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,peerInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,peerInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,peerInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,peerInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,peerInfo>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,peerInfo>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,peerInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,peerInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,peerInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,peerInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,peerInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,peerInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,peerInfo>'{key = F@_1, value = F@_2}.

'd_field_map<string,peerInfo>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,peerInfo>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,peerInfo>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,peerInfo>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,peerInfo>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,peerInfo>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,peerInfo>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_peerInfo(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,peerInfo>'(RestF,
                                              0,
                                              0,
                                              F,
                                              F@_1,
                                              if Prev == undefined -> NewFValue;
                                                 true -> merge_msg_peerInfo(Prev, NewFValue, TrUserData)
                                              end,
                                              TrUserData).

'skip_varint_map<string,peerInfo>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,peerInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,peerInfo>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,peerInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,peerInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,peerInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,peerInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,peerInfo>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,peerInfo>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,peerInfo>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,peerInfo>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,peerInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,peerInfo>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,peerInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<uint32,voteValue>'(Bin, TrUserData) -> 'dfp_read_field_def_map<uint32,voteValue>'(Bin, 0, 0, 0, id(0, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_map<uint32,voteValue>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,voteValue>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,voteValue>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,voteValue>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,voteValue>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,voteValue>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<uint32,voteValue>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<uint32,voteValue>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<uint32,voteValue>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<uint32,voteValue>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<uint32,voteValue>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<uint32,voteValue>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<uint32,voteValue>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<uint32,voteValue>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<uint32,voteValue>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<uint32,voteValue>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<uint32,voteValue>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<uint32,voteValue>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<uint32,voteValue>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,voteValue>'{key = F@_1, value = F@_2}.

'd_field_map<uint32,voteValue>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,voteValue>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,voteValue>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,voteValue>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<uint32,voteValue>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,voteValue>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,voteValue>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_voteValue(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<uint32,voteValue>'(RestF,
                                               0,
                                               0,
                                               F,
                                               F@_1,
                                               if Prev == undefined -> NewFValue;
                                                  true -> merge_msg_voteValue(Prev, NewFValue, TrUserData)
                                               end,
                                               TrUserData).

'skip_varint_map<uint32,voteValue>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<uint32,voteValue>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<uint32,voteValue>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteValue>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<uint32,voteValue>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<uint32,voteValue>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<uint32,voteValue>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<uint32,voteValue>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<uint32,voteValue>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<uint32,voteValue>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<uint32,voteValue>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteValue>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<uint32,voteValue>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteValue>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<string,bool>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,bool>'(Bin, 0, 0, 0, id([], TrUserData), id(false, TrUserData), TrUserData).

'dfp_read_field_def_map<string,bool>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,bool>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,bool>'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,bool>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,bool>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,bool>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,bool>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,bool>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,bool>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,bool>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,bool>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,bool>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> 'd_field_map<string,bool>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,bool>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,bool>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,bool>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,bool>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,bool>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,bool>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,bool>'{key = F@_1, value = F@_2}.

'd_field_map<string,bool>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,bool>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,bool>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,bool>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,bool>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,bool>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,bool>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_map<string,bool>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<string,bool>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,bool>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,bool>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,bool>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,bool>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,bool>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,bool>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,bool>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,bool>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,bool>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,bool>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,bool>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,bool>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,bool>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_map<uint32,voteInfo>'(Bin, TrUserData) -> 'dfp_read_field_def_map<uint32,voteInfo>'(Bin, 0, 0, 0, id(0, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_map<uint32,voteInfo>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,voteInfo>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,voteInfo>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<uint32,voteInfo>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<uint32,voteInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,voteInfo>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<uint32,voteInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<uint32,voteInfo>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<uint32,voteInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<uint32,voteInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<uint32,voteInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<uint32,voteInfo>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<uint32,voteInfo>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<uint32,voteInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<uint32,voteInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<uint32,voteInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<uint32,voteInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<uint32,voteInfo>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<uint32,voteInfo>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<uint32,voteInfo>'{key = F@_1, value = F@_2}.

'd_field_map<uint32,voteInfo>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,voteInfo>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,voteInfo>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_map<uint32,voteInfo>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<uint32,voteInfo>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<uint32,voteInfo>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<uint32,voteInfo>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_voteInfo(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_map<uint32,voteInfo>'(RestF,
                                              0,
                                              0,
                                              F,
                                              F@_1,
                                              if Prev == undefined -> NewFValue;
                                                 true -> merge_msg_voteInfo(Prev, NewFValue, TrUserData)
                                              end,
                                              TrUserData).

'skip_varint_map<uint32,voteInfo>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<uint32,voteInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<uint32,voteInfo>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<uint32,voteInfo>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<uint32,voteInfo>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<uint32,voteInfo>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<uint32,voteInfo>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<uint32,voteInfo>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<uint32,voteInfo>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<uint32,voteInfo>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<uint32,voteInfo>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<uint32,voteInfo>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_Type(0) -> register;
d_enum_Type(1) -> login;
d_enum_Type(2) -> loginReply;
d_enum_Type(3) -> create;
d_enum_Type(4) -> get;
d_enum_Type(5) -> send;
d_enum_Type(6) -> quit;
d_enum_Type(7) -> reply;
d_enum_Type(8) -> new_peer;
d_enum_Type(9) -> peer_left;
d_enum_Type(10) -> newServer;
d_enum_Type(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ServerInfo' -> merge_msg_ServerInfo(Prev, New, TrUserData);
        registerLoginFormat -> merge_msg_registerLoginFormat(Prev, New, TrUserData);
        album -> merge_msg_album(Prev, New, TrUserData);
        reply_message -> merge_msg_reply_message(Prev, New, TrUserData);
        login_reply -> merge_msg_login_reply(Prev, New, TrUserData);
        voteValue -> merge_msg_voteValue(Prev, New, TrUserData);
        voteMap -> merge_msg_voteMap(Prev, New, TrUserData);
        peerInfo -> merge_msg_peerInfo(Prev, New, TrUserData);
        newPeer -> merge_msg_newPeer(Prev, New, TrUserData);
        dotPair -> merge_msg_dotPair(Prev, New, TrUserData);
        voteInfo -> merge_msg_voteInfo(Prev, New, TrUserData);
        fileInfo -> merge_msg_fileInfo(Prev, New, TrUserData);
        groupInfo -> merge_msg_groupInfo(Prev, New, TrUserData);
        crdt -> merge_msg_crdt(Prev, New, TrUserData);
        sessionStart -> merge_msg_sessionStart(Prev, New, TrUserData);
        quitMessage -> merge_msg_quitMessage(Prev, New, TrUserData);
        'Message' -> merge_msg_Message(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ServerInfo/3}).
merge_msg_ServerInfo(#'ServerInfo'{ip = PFip, port = PFport, my_hash = PFmy_hash, inf_hash = PFinf_hash}, #'ServerInfo'{ip = NFip, port = NFport, my_hash = NFmy_hash, inf_hash = NFinf_hash}, _) ->
    #'ServerInfo'{ip =
                      if NFip =:= undefined -> PFip;
                         true -> NFip
                      end,
                  port =
                      if NFport =:= undefined -> PFport;
                         true -> NFport
                      end,
                  my_hash =
                      if NFmy_hash =:= undefined -> PFmy_hash;
                         true -> NFmy_hash
                      end,
                  inf_hash =
                      if NFinf_hash =:= undefined -> PFinf_hash;
                         true -> NFinf_hash
                      end}.

-compile({nowarn_unused_function,merge_msg_registerLoginFormat/3}).
merge_msg_registerLoginFormat(#registerLoginFormat{userName = PFuserName, password = PFpassword}, #registerLoginFormat{userName = NFuserName, password = NFpassword}, _) ->
    #registerLoginFormat{userName =
                             if NFuserName =:= undefined -> PFuserName;
                                true -> NFuserName
                             end,
                         password =
                             if NFpassword =:= undefined -> PFpassword;
                                true -> NFpassword
                             end}.

-compile({nowarn_unused_function,merge_msg_album/3}).
merge_msg_album(#album{albumName = PFalbumName, port = PFport}, #album{albumName = NFalbumName, port = NFport}, _) ->
    #album{albumName =
               if NFalbumName =:= undefined -> PFalbumName;
                  true -> NFalbumName
               end,
           port =
               if NFport =:= undefined -> PFport;
                  true -> NFport
               end}.

-compile({nowarn_unused_function,merge_msg_reply_message/3}).
merge_msg_reply_message(#reply_message{status = PFstatus}, #reply_message{status = NFstatus}, _) ->
    #reply_message{status =
                       if NFstatus =:= undefined -> PFstatus;
                          true -> NFstatus
                       end}.

-compile({nowarn_unused_function,merge_msg_login_reply/3}).
merge_msg_login_reply(#login_reply{status = PFstatus, dataServers = PFdataServers}, #login_reply{status = NFstatus, dataServers = NFdataServers}, TrUserData) ->
    #login_reply{status =
                     if NFstatus =:= undefined -> PFstatus;
                        true -> NFstatus
                     end,
                 dataServers =
                     if PFdataServers /= undefined, NFdataServers /= undefined -> 'erlang_++'(PFdataServers, NFdataServers, TrUserData);
                        PFdataServers == undefined -> NFdataServers;
                        NFdataServers == undefined -> PFdataServers
                     end}.

-compile({nowarn_unused_function,merge_msg_voteValue/3}).
merge_msg_voteValue(#voteValue{sum = PFsum, count = PFcount}, #voteValue{sum = NFsum, count = NFcount}, _) ->
    #voteValue{sum =
                   if NFsum =:= undefined -> PFsum;
                      true -> NFsum
                   end,
               count =
                   if NFcount =:= undefined -> PFcount;
                      true -> NFcount
                   end}.

-compile({nowarn_unused_function,merge_msg_voteMap/3}).
merge_msg_voteMap(#voteMap{map = PFmap}, #voteMap{map = NFmap}, TrUserData) ->
    #voteMap{map =
                 if PFmap /= undefined, NFmap /= undefined -> 'tr_merge_voteMap.map'(PFmap, NFmap, TrUserData);
                    PFmap == undefined -> NFmap;
                    NFmap == undefined -> PFmap
                 end}.

-compile({nowarn_unused_function,merge_msg_peerInfo/3}).
merge_msg_peerInfo(#peerInfo{ip = PFip, port = PFport, id = PFid}, #peerInfo{ip = NFip, port = NFport, id = NFid}, _) ->
    #peerInfo{ip =
                  if NFip =:= undefined -> PFip;
                     true -> NFip
                  end,
              port =
                  if NFport =:= undefined -> PFport;
                     true -> NFport
                  end,
              id =
                  if NFid =:= undefined -> PFid;
                     true -> NFid
                  end}.

-compile({nowarn_unused_function,merge_msg_newPeer/3}).
merge_msg_newPeer(#newPeer{name = PFname, ip = PFip, port = PFport}, #newPeer{name = NFname, ip = NFip, port = NFport}, _) ->
    #newPeer{name =
                 if NFname =:= undefined -> PFname;
                    true -> NFname
                 end,
             ip =
                 if NFip =:= undefined -> PFip;
                    true -> NFip
                 end,
             port =
                 if NFport =:= undefined -> PFport;
                    true -> NFport
                 end}.

-compile({nowarn_unused_function,merge_msg_dotPair/3}).
merge_msg_dotPair(#dotPair{id = PFid, version = PFversion}, #dotPair{id = NFid, version = NFversion}, _) ->
    #dotPair{id =
                 if NFid =:= undefined -> PFid;
                    true -> NFid
                 end,
             version =
                 if NFversion =:= undefined -> PFversion;
                    true -> NFversion
                 end}.

-compile({nowarn_unused_function,merge_msg_voteInfo/3}).
merge_msg_voteInfo(#voteInfo{sum = PFsum, count = PFcount}, #voteInfo{sum = NFsum, count = NFcount}, _) ->
    #voteInfo{sum =
                  if NFsum =:= undefined -> PFsum;
                     true -> NFsum
                  end,
              count =
                  if NFcount =:= undefined -> PFcount;
                     true -> NFcount
                  end}.

-compile({nowarn_unused_function,merge_msg_fileInfo/3}).
merge_msg_fileInfo(#fileInfo{votes = PFvotes, dotSet = PFdotSet, fileHash = PFfileHash}, #fileInfo{votes = NFvotes, dotSet = NFdotSet, fileHash = NFfileHash}, TrUserData) ->
    #fileInfo{votes =
                  if PFvotes /= undefined, NFvotes /= undefined -> 'tr_merge_fileInfo.votes'(PFvotes, NFvotes, TrUserData);
                     PFvotes == undefined -> NFvotes;
                     NFvotes == undefined -> PFvotes
                  end,
              dotSet =
                  if PFdotSet /= undefined, NFdotSet /= undefined -> 'erlang_++'(PFdotSet, NFdotSet, TrUserData);
                     PFdotSet == undefined -> NFdotSet;
                     NFdotSet == undefined -> PFdotSet
                  end,
              fileHash =
                  if NFfileHash =:= undefined -> PFfileHash;
                     true -> NFfileHash
                  end}.

-compile({nowarn_unused_function,merge_msg_groupInfo/3}).
merge_msg_groupInfo(#groupInfo{dotSet = PFdotSet}, #groupInfo{dotSet = NFdotSet}, TrUserData) ->
    #groupInfo{dotSet =
                   if PFdotSet /= undefined, NFdotSet /= undefined -> 'erlang_++'(PFdotSet, NFdotSet, TrUserData);
                      PFdotSet == undefined -> NFdotSet;
                      NFdotSet == undefined -> PFdotSet
                   end}.

-compile({nowarn_unused_function,merge_msg_crdt/3}).
merge_msg_crdt(#crdt{versionVector = PFversionVector, files = PFfiles, groupUsers = PFgroupUsers, id = PFid}, #crdt{versionVector = NFversionVector, files = NFfiles, groupUsers = NFgroupUsers, id = NFid}, TrUserData) ->
    #crdt{versionVector =
              if PFversionVector /= undefined, NFversionVector /= undefined -> 'tr_merge_crdt.versionVector'(PFversionVector, NFversionVector, TrUserData);
                 PFversionVector == undefined -> NFversionVector;
                 NFversionVector == undefined -> PFversionVector
              end,
          files =
              if PFfiles /= undefined, NFfiles /= undefined -> 'tr_merge_crdt.files'(PFfiles, NFfiles, TrUserData);
                 PFfiles == undefined -> NFfiles;
                 NFfiles == undefined -> PFfiles
              end,
          groupUsers =
              if PFgroupUsers /= undefined, NFgroupUsers /= undefined -> 'tr_merge_crdt.groupUsers'(PFgroupUsers, NFgroupUsers, TrUserData);
                 PFgroupUsers == undefined -> NFgroupUsers;
                 NFgroupUsers == undefined -> PFgroupUsers
              end,
          id =
              if NFid =:= undefined -> PFid;
                 true -> NFid
              end}.

-compile({nowarn_unused_function,merge_msg_sessionStart/3}).
merge_msg_sessionStart(#sessionStart{id = PFid, crdt = PFcrdt, sessionPeers = PFsessionPeers, voteTable = PFvoteTable, status = PFstatus},
                       #sessionStart{id = NFid, crdt = NFcrdt, sessionPeers = NFsessionPeers, voteTable = NFvoteTable, status = NFstatus}, TrUserData) ->
    #sessionStart{id =
                      if NFid =:= undefined -> PFid;
                         true -> NFid
                      end,
                  crdt =
                      if PFcrdt /= undefined, NFcrdt /= undefined -> merge_msg_crdt(PFcrdt, NFcrdt, TrUserData);
                         PFcrdt == undefined -> NFcrdt;
                         NFcrdt == undefined -> PFcrdt
                      end,
                  sessionPeers =
                      if PFsessionPeers /= undefined, NFsessionPeers /= undefined -> 'tr_merge_sessionStart.sessionPeers'(PFsessionPeers, NFsessionPeers, TrUserData);
                         PFsessionPeers == undefined -> NFsessionPeers;
                         NFsessionPeers == undefined -> PFsessionPeers
                      end,
                  voteTable =
                      if PFvoteTable /= undefined, NFvoteTable /= undefined -> 'tr_merge_sessionStart.voteTable'(PFvoteTable, NFvoteTable, TrUserData);
                         PFvoteTable == undefined -> NFvoteTable;
                         NFvoteTable == undefined -> PFvoteTable
                      end,
                  status =
                      if NFstatus =:= undefined -> PFstatus;
                         true -> NFstatus
                      end}.

-compile({nowarn_unused_function,merge_msg_quitMessage/3}).
merge_msg_quitMessage(#quitMessage{crdt = PFcrdt, voteTable = PFvoteTable}, #quitMessage{crdt = NFcrdt, voteTable = NFvoteTable}, TrUserData) ->
    #quitMessage{crdt =
                     if PFcrdt /= undefined, NFcrdt /= undefined -> merge_msg_crdt(PFcrdt, NFcrdt, TrUserData);
                        PFcrdt == undefined -> NFcrdt;
                        NFcrdt == undefined -> PFcrdt
                     end,
                 voteTable =
                     if PFvoteTable /= undefined, NFvoteTable /= undefined -> 'tr_merge_quitMessage.voteTable'(PFvoteTable, NFvoteTable, TrUserData);
                        PFvoteTable == undefined -> NFvoteTable;
                        NFvoteTable == undefined -> PFvoteTable
                     end}.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#'Message'{type = PFtype, msg = PFmsg}, #'Message'{type = NFtype, msg = NFmsg}, TrUserData) ->
    #'Message'{type =
                   if NFtype =:= undefined -> PFtype;
                      true -> NFtype
                   end,
               msg =
                   case {PFmsg, NFmsg} of
                       {{m1, OPFmsg}, {m1, ONFmsg}} -> {m1, merge_msg_registerLoginFormat(OPFmsg, ONFmsg, TrUserData)};
                       {{m2, OPFmsg}, {m2, ONFmsg}} -> {m2, merge_msg_album(OPFmsg, ONFmsg, TrUserData)};
                       {{m3, OPFmsg}, {m3, ONFmsg}} -> {m3, merge_msg_sessionStart(OPFmsg, ONFmsg, TrUserData)};
                       {{m4, OPFmsg}, {m4, ONFmsg}} -> {m4, merge_msg_quitMessage(OPFmsg, ONFmsg, TrUserData)};
                       {{m5, OPFmsg}, {m5, ONFmsg}} -> {m5, merge_msg_reply_message(OPFmsg, ONFmsg, TrUserData)};
                       {{m6, OPFmsg}, {m6, ONFmsg}} -> {m6, merge_msg_login_reply(OPFmsg, ONFmsg, TrUserData)};
                       {{m7, OPFmsg}, {m7, ONFmsg}} -> {m7, merge_msg_newPeer(OPFmsg, ONFmsg, TrUserData)};
                       {_, undefined} -> PFmsg;
                       _ -> NFmsg
                   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'ServerInfo' -> v_msg_ServerInfo(Msg, [MsgName], TrUserData);
        registerLoginFormat -> v_msg_registerLoginFormat(Msg, [MsgName], TrUserData);
        album -> v_msg_album(Msg, [MsgName], TrUserData);
        reply_message -> v_msg_reply_message(Msg, [MsgName], TrUserData);
        login_reply -> v_msg_login_reply(Msg, [MsgName], TrUserData);
        voteValue -> v_msg_voteValue(Msg, [MsgName], TrUserData);
        voteMap -> v_msg_voteMap(Msg, [MsgName], TrUserData);
        peerInfo -> v_msg_peerInfo(Msg, [MsgName], TrUserData);
        newPeer -> v_msg_newPeer(Msg, [MsgName], TrUserData);
        dotPair -> v_msg_dotPair(Msg, [MsgName], TrUserData);
        voteInfo -> v_msg_voteInfo(Msg, [MsgName], TrUserData);
        fileInfo -> v_msg_fileInfo(Msg, [MsgName], TrUserData);
        groupInfo -> v_msg_groupInfo(Msg, [MsgName], TrUserData);
        crdt -> v_msg_crdt(Msg, [MsgName], TrUserData);
        sessionStart -> v_msg_sessionStart(Msg, [MsgName], TrUserData);
        quitMessage -> v_msg_quitMessage(Msg, [MsgName], TrUserData);
        'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ServerInfo/3}).
-dialyzer({nowarn_function,v_msg_ServerInfo/3}).
v_msg_ServerInfo(#'ServerInfo'{ip = F1, port = F2, my_hash = F3, inf_hash = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [ip | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [port | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [my_hash | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [inf_hash | Path], TrUserData)
    end,
    ok;
v_msg_ServerInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ServerInfo'}, X, Path).

-compile({nowarn_unused_function,v_submsg_registerLoginFormat/3}).
-dialyzer({nowarn_function,v_submsg_registerLoginFormat/3}).
v_submsg_registerLoginFormat(Msg, Path, TrUserData) -> v_msg_registerLoginFormat(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_registerLoginFormat/3}).
-dialyzer({nowarn_function,v_msg_registerLoginFormat/3}).
v_msg_registerLoginFormat(#registerLoginFormat{userName = F1, password = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userName | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    ok;
v_msg_registerLoginFormat(X, Path, _TrUserData) -> mk_type_error({expected_msg, registerLoginFormat}, X, Path).

-compile({nowarn_unused_function,v_submsg_album/3}).
-dialyzer({nowarn_function,v_submsg_album/3}).
v_submsg_album(Msg, Path, TrUserData) -> v_msg_album(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_album/3}).
-dialyzer({nowarn_function,v_msg_album/3}).
v_msg_album(#album{albumName = F1, port = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [albumName | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [port | Path], TrUserData)
    end,
    ok;
v_msg_album(X, Path, _TrUserData) -> mk_type_error({expected_msg, album}, X, Path).

-compile({nowarn_unused_function,v_submsg_reply_message/3}).
-dialyzer({nowarn_function,v_submsg_reply_message/3}).
v_submsg_reply_message(Msg, Path, TrUserData) -> v_msg_reply_message(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_reply_message/3}).
-dialyzer({nowarn_function,v_msg_reply_message/3}).
v_msg_reply_message(#reply_message{status = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [status | Path], TrUserData)
    end,
    ok;
v_msg_reply_message(X, Path, _TrUserData) -> mk_type_error({expected_msg, reply_message}, X, Path).

-compile({nowarn_unused_function,v_submsg_login_reply/3}).
-dialyzer({nowarn_function,v_submsg_login_reply/3}).
v_submsg_login_reply(Msg, Path, TrUserData) -> v_msg_login_reply(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_login_reply/3}).
-dialyzer({nowarn_function,v_msg_login_reply/3}).
v_msg_login_reply(#login_reply{status = F1, dataServers = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [status | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_submsg_peerInfo(Elem, [dataServers | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, peerInfo}}, F2, [dataServers | Path])
    end,
    ok;
v_msg_login_reply(X, Path, _TrUserData) -> mk_type_error({expected_msg, login_reply}, X, Path).

-compile({nowarn_unused_function,v_submsg_voteValue/3}).
-dialyzer({nowarn_function,v_submsg_voteValue/3}).
v_submsg_voteValue(Msg, Path, TrUserData) -> v_msg_voteValue(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_voteValue/3}).
-dialyzer({nowarn_function,v_msg_voteValue/3}).
v_msg_voteValue(#voteValue{sum = F1, count = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [sum | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [count | Path], TrUserData)
    end,
    ok;
v_msg_voteValue(X, Path, _TrUserData) -> mk_type_error({expected_msg, voteValue}, X, Path).

-compile({nowarn_unused_function,v_msg_voteMap/3}).
-dialyzer({nowarn_function,v_msg_voteMap/3}).
v_msg_voteMap(#voteMap{map = F1}, Path, TrUserData) ->
    'v_map<uint32,voteValue>'(F1, [map | Path], TrUserData),
    ok;
v_msg_voteMap(X, Path, _TrUserData) -> mk_type_error({expected_msg, voteMap}, X, Path).

-compile({nowarn_unused_function,v_submsg_peerInfo/3}).
-dialyzer({nowarn_function,v_submsg_peerInfo/3}).
v_submsg_peerInfo(Msg, Path, TrUserData) -> v_msg_peerInfo(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_peerInfo/3}).
-dialyzer({nowarn_function,v_msg_peerInfo/3}).
v_msg_peerInfo(#peerInfo{ip = F1, port = F2, id = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [ip | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [port | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [id | Path], TrUserData)
    end,
    ok;
v_msg_peerInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, peerInfo}, X, Path).

-compile({nowarn_unused_function,v_submsg_newPeer/3}).
-dialyzer({nowarn_function,v_submsg_newPeer/3}).
v_submsg_newPeer(Msg, Path, TrUserData) -> v_msg_newPeer(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_newPeer/3}).
-dialyzer({nowarn_function,v_msg_newPeer/3}).
v_msg_newPeer(#newPeer{name = F1, ip = F2, port = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ip | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [port | Path], TrUserData)
    end,
    ok;
v_msg_newPeer(X, Path, _TrUserData) -> mk_type_error({expected_msg, newPeer}, X, Path).

-compile({nowarn_unused_function,v_submsg_dotPair/3}).
-dialyzer({nowarn_function,v_submsg_dotPair/3}).
v_submsg_dotPair(Msg, Path, TrUserData) -> v_msg_dotPair(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_dotPair/3}).
-dialyzer({nowarn_function,v_msg_dotPair/3}).
v_msg_dotPair(#dotPair{id = F1, version = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [version | Path], TrUserData)
    end,
    ok;
v_msg_dotPair(X, Path, _TrUserData) -> mk_type_error({expected_msg, dotPair}, X, Path).

-compile({nowarn_unused_function,v_submsg_voteInfo/3}).
-dialyzer({nowarn_function,v_submsg_voteInfo/3}).
v_submsg_voteInfo(Msg, Path, TrUserData) -> v_msg_voteInfo(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_voteInfo/3}).
-dialyzer({nowarn_function,v_msg_voteInfo/3}).
v_msg_voteInfo(#voteInfo{sum = F1, count = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [sum | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [count | Path], TrUserData)
    end,
    ok;
v_msg_voteInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, voteInfo}, X, Path).

-compile({nowarn_unused_function,v_submsg_fileInfo/3}).
-dialyzer({nowarn_function,v_submsg_fileInfo/3}).
v_submsg_fileInfo(Msg, Path, TrUserData) -> v_msg_fileInfo(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_fileInfo/3}).
-dialyzer({nowarn_function,v_msg_fileInfo/3}).
v_msg_fileInfo(#fileInfo{votes = F1, dotSet = F2, fileHash = F3}, Path, TrUserData) ->
    'v_map<uint32,voteInfo>'(F1, [votes | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_submsg_dotPair(Elem, [dotSet | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, dotPair}}, F2, [dotSet | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [fileHash | Path], TrUserData)
    end,
    ok;
v_msg_fileInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, fileInfo}, X, Path).

-compile({nowarn_unused_function,v_submsg_groupInfo/3}).
-dialyzer({nowarn_function,v_submsg_groupInfo/3}).
v_submsg_groupInfo(Msg, Path, TrUserData) -> v_msg_groupInfo(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_groupInfo/3}).
-dialyzer({nowarn_function,v_msg_groupInfo/3}).
v_msg_groupInfo(#groupInfo{dotSet = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_submsg_dotPair(Elem, [dotSet | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, dotPair}}, F1, [dotSet | Path])
    end,
    ok;
v_msg_groupInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, groupInfo}, X, Path).

-compile({nowarn_unused_function,v_submsg_crdt/3}).
-dialyzer({nowarn_function,v_submsg_crdt/3}).
v_submsg_crdt(Msg, Path, TrUserData) -> v_msg_crdt(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_crdt/3}).
-dialyzer({nowarn_function,v_msg_crdt/3}).
v_msg_crdt(#crdt{versionVector = F1, files = F2, groupUsers = F3, id = F4}, Path, TrUserData) ->
    'v_map<uint32,uint64>'(F1, [versionVector | Path], TrUserData),
    'v_map<string,fileInfo>'(F2, [files | Path], TrUserData),
    'v_map<string,groupInfo>'(F3, [groupUsers | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [id | Path], TrUserData)
    end,
    ok;
v_msg_crdt(X, Path, _TrUserData) -> mk_type_error({expected_msg, crdt}, X, Path).

-compile({nowarn_unused_function,v_submsg_sessionStart/3}).
-dialyzer({nowarn_function,v_submsg_sessionStart/3}).
v_submsg_sessionStart(Msg, Path, TrUserData) -> v_msg_sessionStart(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_sessionStart/3}).
-dialyzer({nowarn_function,v_msg_sessionStart/3}).
v_msg_sessionStart(#sessionStart{id = F1, crdt = F2, sessionPeers = F3, voteTable = F4, status = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_submsg_crdt(F2, [crdt | Path], TrUserData)
    end,
    'v_map<string,peerInfo>'(F3, [sessionPeers | Path], TrUserData),
    'v_map<string,bool>'(F4, [voteTable | Path], TrUserData),
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [status | Path], TrUserData)
    end,
    ok;
v_msg_sessionStart(X, Path, _TrUserData) -> mk_type_error({expected_msg, sessionStart}, X, Path).

-compile({nowarn_unused_function,v_submsg_quitMessage/3}).
-dialyzer({nowarn_function,v_submsg_quitMessage/3}).
v_submsg_quitMessage(Msg, Path, TrUserData) -> v_msg_quitMessage(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_quitMessage/3}).
-dialyzer({nowarn_function,v_msg_quitMessage/3}).
v_msg_quitMessage(#quitMessage{crdt = F1, voteTable = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_submsg_crdt(F1, [crdt | Path], TrUserData)
    end,
    'v_map<string,bool>'(F2, [voteTable | Path], TrUserData),
    ok;
v_msg_quitMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, quitMessage}, X, Path).

-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#'Message'{type = F1, msg = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_Type(F1, [type | Path], TrUserData)
    end,
    case F2 of
        undefined -> ok;
        {m1, OF2} -> v_submsg_registerLoginFormat(OF2, [m1, msg | Path], TrUserData);
        {m2, OF2} -> v_submsg_album(OF2, [m2, msg | Path], TrUserData);
        {m3, OF2} -> v_submsg_sessionStart(OF2, [m3, msg | Path], TrUserData);
        {m4, OF2} -> v_submsg_quitMessage(OF2, [m4, msg | Path], TrUserData);
        {m5, OF2} -> v_submsg_reply_message(OF2, [m5, msg | Path], TrUserData);
        {m6, OF2} -> v_submsg_login_reply(OF2, [m6, msg | Path], TrUserData);
        {m7, OF2} -> v_submsg_newPeer(OF2, [m7, msg | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F2, [msg | Path])
    end,
    ok;
v_msg_Message(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_enum_Type/3}).
-dialyzer({nowarn_function,v_enum_Type/3}).
v_enum_Type(register, _Path, _TrUserData) -> ok;
v_enum_Type(login, _Path, _TrUserData) -> ok;
v_enum_Type(loginReply, _Path, _TrUserData) -> ok;
v_enum_Type(create, _Path, _TrUserData) -> ok;
v_enum_Type(get, _Path, _TrUserData) -> ok;
v_enum_Type(send, _Path, _TrUserData) -> ok;
v_enum_Type(quit, _Path, _TrUserData) -> ok;
v_enum_Type(reply, _Path, _TrUserData) -> ok;
v_enum_Type(new_peer, _Path, _TrUserData) -> ok;
v_enum_Type(peer_left, _Path, _TrUserData) -> ok;
v_enum_Type(newServer, _Path, _TrUserData) -> ok;
v_enum_Type(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_Type(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'Type'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when is_integer(N), -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<uint32,uint64>'/3}).
-dialyzer({nowarn_function,'v_map<uint32,uint64>'/3}).
'v_map<uint32,uint64>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_uint32(Key, [key | Path], TrUserData),
             v_type_uint64(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<uint32,uint64>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<string,fileInfo>'/3}).
-dialyzer({nowarn_function,'v_map<string,fileInfo>'/3}).
'v_map<string,fileInfo>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_string(Key, [key | Path], TrUserData),
             v_submsg_fileInfo(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,fileInfo>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<string,groupInfo>'/3}).
-dialyzer({nowarn_function,'v_map<string,groupInfo>'/3}).
'v_map<string,groupInfo>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_string(Key, [key | Path], TrUserData),
             v_submsg_groupInfo(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,groupInfo>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<string,peerInfo>'/3}).
-dialyzer({nowarn_function,'v_map<string,peerInfo>'/3}).
'v_map<string,peerInfo>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_string(Key, [key | Path], TrUserData),
             v_submsg_peerInfo(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,peerInfo>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<uint32,voteValue>'/3}).
-dialyzer({nowarn_function,'v_map<uint32,voteValue>'/3}).
'v_map<uint32,voteValue>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_uint32(Key, [key | Path], TrUserData),
             v_submsg_voteValue(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<uint32,voteValue>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<string,bool>'/3}).
-dialyzer({nowarn_function,'v_map<string,bool>'/3}).
'v_map<string,bool>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_string(Key, [key | Path], TrUserData),
             v_type_bool(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,bool>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,'v_map<uint32,voteInfo>'/3}).
-dialyzer({nowarn_function,'v_map<uint32,voteInfo>'/3}).
'v_map<uint32,voteInfo>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_uint32(Key, [key | Path], TrUserData),
             v_submsg_voteInfo(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<uint32,voteInfo>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_crdt.files'/2}).
'tr_decode_init_default_crdt.files'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_crdt.files'/3}).
'tr_merge_crdt.files'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_crdt.files'/2}).
'tr_decode_repeated_finalize_crdt.files'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_crdt.files'/3}).
'tr_decode_repeated_add_elem_crdt.files'(Elem, L, _) -> mt_add_item_r_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_crdt.groupUsers'/2}).
'tr_decode_init_default_crdt.groupUsers'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_crdt.groupUsers'/3}).
'tr_merge_crdt.groupUsers'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_crdt.groupUsers'/2}).
'tr_decode_repeated_finalize_crdt.groupUsers'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_crdt.groupUsers'/3}).
'tr_decode_repeated_add_elem_crdt.groupUsers'(Elem, L, _) -> mt_add_item_r_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_sessionStart.sessionPeers'/2}).
'tr_decode_init_default_sessionStart.sessionPeers'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_sessionStart.sessionPeers'/3}).
'tr_merge_sessionStart.sessionPeers'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_sessionStart.sessionPeers'/2}).
'tr_decode_repeated_finalize_sessionStart.sessionPeers'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_sessionStart.sessionPeers'/3}).
'tr_decode_repeated_add_elem_sessionStart.sessionPeers'(Elem, L, _) -> mt_add_item_r_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_voteMap.map'/2}).
'tr_decode_init_default_voteMap.map'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_voteMap.map'/3}).
'tr_merge_voteMap.map'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_voteMap.map'/2}).
'tr_decode_repeated_finalize_voteMap.map'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_voteMap.map'/3}).
'tr_decode_repeated_add_elem_voteMap.map'(Elem, L, _) -> mt_add_item_r_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_fileInfo.votes'/2}).
'tr_decode_init_default_fileInfo.votes'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_fileInfo.votes'/3}).
'tr_merge_fileInfo.votes'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_fileInfo.votes'/2}).
'tr_decode_repeated_finalize_fileInfo.votes'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_fileInfo.votes'/3}).
'tr_decode_repeated_add_elem_fileInfo.votes'(Elem, L, _) -> mt_add_item_r_verify_value(Elem, L).

-compile({inline,'tr_encode_quitMessage.voteTable[x]'/2}).
'tr_encode_quitMessage.voteTable[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,bool>').

-compile({inline,'tr_encode_sessionStart.voteTable[x]'/2}).
'tr_encode_sessionStart.voteTable[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,bool>').

-compile({inline,'tr_decode_init_default_quitMessage.voteTable'/2}).
'tr_decode_init_default_quitMessage.voteTable'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_quitMessage.voteTable'/3}).
'tr_merge_quitMessage.voteTable'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_quitMessage.voteTable'/2}).
'tr_decode_repeated_finalize_quitMessage.voteTable'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_quitMessage.voteTable'/3}).
'tr_decode_repeated_add_elem_quitMessage.voteTable'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_voteMap.map[x]'/2}).
'tr_encode_voteMap.map[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<uint32,voteValue>').

-compile({inline,'tr_encode_fileInfo.votes[x]'/2}).
'tr_encode_fileInfo.votes[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<uint32,voteInfo>').

-compile({inline,'tr_decode_init_default_sessionStart.voteTable'/2}).
'tr_decode_init_default_sessionStart.voteTable'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_sessionStart.voteTable'/3}).
'tr_merge_sessionStart.voteTable'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_sessionStart.voteTable'/2}).
'tr_decode_repeated_finalize_sessionStart.voteTable'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_sessionStart.voteTable'/3}).
'tr_decode_repeated_add_elem_sessionStart.voteTable'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_crdt.versionVector'/2}).
'tr_decode_init_default_crdt.versionVector'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_crdt.versionVector'/3}).
'tr_merge_crdt.versionVector'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_crdt.versionVector'/2}).
'tr_decode_repeated_finalize_crdt.versionVector'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_crdt.versionVector'/3}).
'tr_decode_repeated_add_elem_crdt.versionVector'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_crdt.files[x]'/2}).
'tr_encode_crdt.files[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,fileInfo>').

-compile({inline,'tr_encode_crdt.groupUsers[x]'/2}).
'tr_encode_crdt.groupUsers[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,groupInfo>').

-compile({inline,'tr_encode_sessionStart.sessionPeers[x]'/2}).
'tr_encode_sessionStart.sessionPeers[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,peerInfo>').

-compile({inline,'tr_encode_crdt.versionVector[x]'/2}).
'tr_encode_crdt.versionVector[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<uint32,uint64>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) -> {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].


-compile({inline,mt_add_item_r_verify_value/2}).
mt_add_item_r_verify_value({_, _, undefined}, _) -> error({gpb_error, missing_value});
mt_add_item_r_verify_value({_RName, K, V}, Acc) -> [{K, V} | Acc].


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) -> mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) -> mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) -> dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end, dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'Type'}, [{register, 0}, {login, 1}, {loginReply, 2}, {create, 3}, {get, 4}, {send, 5}, {quit, 6}, {reply, 7}, {new_peer, 8}, {peer_left, 9}, {newServer, 10}]},
     {{msg, 'ServerInfo'},
      [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = port, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []},
       #field{name = my_hash, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = inf_hash, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}]},
     {{msg, registerLoginFormat}, [#field{name = userName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, album}, [#field{name = albumName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = port, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, reply_message}, [#field{name = status, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}]},
     {{msg, login_reply}, [#field{name = status, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = dataServers, fnum = 2, rnum = 3, type = {msg, peerInfo}, occurrence = repeated, opts = []}]},
     {{msg, voteValue}, [#field{name = sum, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = count, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}]},
     {{msg, voteMap}, [#field{name = map, fnum = 1, rnum = 2, type = {map, uint32, {msg, voteValue}}, occurrence = repeated, opts = []}]},
     {{msg, peerInfo},
      [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = port, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = id, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, newPeer},
      [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, dotPair}, [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = version, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []}]},
     {{msg, voteInfo}, [#field{name = sum, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []}, #field{name = count, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []}]},
     {{msg, fileInfo},
      [#field{name = votes, fnum = 1, rnum = 2, type = {map, uint32, {msg, voteInfo}}, occurrence = repeated, opts = []},
       #field{name = dotSet, fnum = 2, rnum = 3, type = {msg, dotPair}, occurrence = repeated, opts = []},
       #field{name = fileHash, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, groupInfo}, [#field{name = dotSet, fnum = 1, rnum = 2, type = {msg, dotPair}, occurrence = repeated, opts = []}]},
     {{msg, crdt},
      [#field{name = versionVector, fnum = 1, rnum = 2, type = {map, uint32, uint64}, occurrence = repeated, opts = []},
       #field{name = files, fnum = 2, rnum = 3, type = {map, string, {msg, fileInfo}}, occurrence = repeated, opts = []},
       #field{name = groupUsers, fnum = 3, rnum = 4, type = {map, string, {msg, groupInfo}}, occurrence = repeated, opts = []},
       #field{name = id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, sessionStart},
      [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = crdt, fnum = 2, rnum = 3, type = {msg, crdt}, occurrence = optional, opts = []},
       #field{name = sessionPeers, fnum = 3, rnum = 4, type = {map, string, {msg, peerInfo}}, occurrence = repeated, opts = []},
       #field{name = voteTable, fnum = 4, rnum = 5, type = {map, string, bool}, occurrence = repeated, opts = []},
       #field{name = status, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}]},
     {{msg, quitMessage}, [#field{name = crdt, fnum = 1, rnum = 2, type = {msg, crdt}, occurrence = optional, opts = []}, #field{name = voteTable, fnum = 2, rnum = 3, type = {map, string, bool}, occurrence = repeated, opts = []}]},
     {{msg, 'Message'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'Type'}, occurrence = optional, opts = []},
       #gpb_oneof{name = msg, rnum = 3,
                  fields =
                      [#field{name = m1, fnum = 2, rnum = 3, type = {msg, registerLoginFormat}, occurrence = optional, opts = []},
                       #field{name = m2, fnum = 3, rnum = 3, type = {msg, album}, occurrence = optional, opts = []},
                       #field{name = m3, fnum = 4, rnum = 3, type = {msg, sessionStart}, occurrence = optional, opts = []},
                       #field{name = m4, fnum = 5, rnum = 3, type = {msg, quitMessage}, occurrence = optional, opts = []},
                       #field{name = m5, fnum = 6, rnum = 3, type = {msg, reply_message}, occurrence = optional, opts = []},
                       #field{name = m6, fnum = 7, rnum = 3, type = {msg, login_reply}, occurrence = optional, opts = []},
                       #field{name = m7, fnum = 8, rnum = 3, type = {msg, newPeer}, occurrence = optional, opts = []}],
                  opts = []}]}].


get_msg_names() -> ['ServerInfo', registerLoginFormat, album, reply_message, login_reply, voteValue, voteMap, peerInfo, newPeer, dotPair, voteInfo, fileInfo, groupInfo, crdt, sessionStart, quitMessage, 'Message'].


get_group_names() -> [].


get_msg_or_group_names() -> ['ServerInfo', registerLoginFormat, album, reply_message, login_reply, voteValue, voteMap, peerInfo, newPeer, dotPair, voteInfo, fileInfo, groupInfo, crdt, sessionStart, quitMessage, 'Message'].


get_enum_names() -> ['Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ServerInfo') ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = port, fnum = 2, rnum = 3, type = int32, occurrence = optional, opts = []},
     #field{name = my_hash, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = inf_hash, fnum = 4, rnum = 5, type = bytes, occurrence = optional, opts = []}];
find_msg_def(registerLoginFormat) -> [#field{name = userName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(album) -> [#field{name = albumName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = port, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(reply_message) -> [#field{name = status, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}];
find_msg_def(login_reply) -> [#field{name = status, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = dataServers, fnum = 2, rnum = 3, type = {msg, peerInfo}, occurrence = repeated, opts = []}];
find_msg_def(voteValue) -> [#field{name = sum, fnum = 1, rnum = 2, type = int64, occurrence = optional, opts = []}, #field{name = count, fnum = 2, rnum = 3, type = int64, occurrence = optional, opts = []}];
find_msg_def(voteMap) -> [#field{name = map, fnum = 1, rnum = 2, type = {map, uint32, {msg, voteValue}}, occurrence = repeated, opts = []}];
find_msg_def(peerInfo) ->
    [#field{name = ip, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = port, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = id, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def(newPeer) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def(dotPair) -> [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = version, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []}];
find_msg_def(voteInfo) -> [#field{name = sum, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []}, #field{name = count, fnum = 2, rnum = 3, type = uint64, occurrence = optional, opts = []}];
find_msg_def(fileInfo) ->
    [#field{name = votes, fnum = 1, rnum = 2, type = {map, uint32, {msg, voteInfo}}, occurrence = repeated, opts = []},
     #field{name = dotSet, fnum = 2, rnum = 3, type = {msg, dotPair}, occurrence = repeated, opts = []},
     #field{name = fileHash, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def(groupInfo) -> [#field{name = dotSet, fnum = 1, rnum = 2, type = {msg, dotPair}, occurrence = repeated, opts = []}];
find_msg_def(crdt) ->
    [#field{name = versionVector, fnum = 1, rnum = 2, type = {map, uint32, uint64}, occurrence = repeated, opts = []},
     #field{name = files, fnum = 2, rnum = 3, type = {map, string, {msg, fileInfo}}, occurrence = repeated, opts = []},
     #field{name = groupUsers, fnum = 3, rnum = 4, type = {map, string, {msg, groupInfo}}, occurrence = repeated, opts = []},
     #field{name = id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def(sessionStart) ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = crdt, fnum = 2, rnum = 3, type = {msg, crdt}, occurrence = optional, opts = []},
     #field{name = sessionPeers, fnum = 3, rnum = 4, type = {map, string, {msg, peerInfo}}, occurrence = repeated, opts = []},
     #field{name = voteTable, fnum = 4, rnum = 5, type = {map, string, bool}, occurrence = repeated, opts = []},
     #field{name = status, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}];
find_msg_def(quitMessage) -> [#field{name = crdt, fnum = 1, rnum = 2, type = {msg, crdt}, occurrence = optional, opts = []}, #field{name = voteTable, fnum = 2, rnum = 3, type = {map, string, bool}, occurrence = repeated, opts = []}];
find_msg_def('Message') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'Type'}, occurrence = optional, opts = []},
     #gpb_oneof{name = msg, rnum = 3,
                fields =
                    [#field{name = m1, fnum = 2, rnum = 3, type = {msg, registerLoginFormat}, occurrence = optional, opts = []},
                     #field{name = m2, fnum = 3, rnum = 3, type = {msg, album}, occurrence = optional, opts = []},
                     #field{name = m3, fnum = 4, rnum = 3, type = {msg, sessionStart}, occurrence = optional, opts = []},
                     #field{name = m4, fnum = 5, rnum = 3, type = {msg, quitMessage}, occurrence = optional, opts = []},
                     #field{name = m5, fnum = 6, rnum = 3, type = {msg, reply_message}, occurrence = optional, opts = []},
                     #field{name = m6, fnum = 7, rnum = 3, type = {msg, login_reply}, occurrence = optional, opts = []},
                     #field{name = m7, fnum = 8, rnum = 3, type = {msg, newPeer}, occurrence = optional, opts = []}],
                opts = []}];
find_msg_def(_) -> error.


find_enum_def('Type') -> [{register, 0}, {login, 1}, {loginReply, 2}, {create, 3}, {get, 4}, {send, 5}, {quit, 6}, {reply, 7}, {new_peer, 8}, {peer_left, 9}, {newServer, 10}];
find_enum_def(_) -> error.


enum_symbol_by_value('Type', Value) -> enum_symbol_by_value_Type(Value).


enum_value_by_symbol('Type', Sym) -> enum_value_by_symbol_Type(Sym).


enum_symbol_by_value_Type(0) -> register;
enum_symbol_by_value_Type(1) -> login;
enum_symbol_by_value_Type(2) -> loginReply;
enum_symbol_by_value_Type(3) -> create;
enum_symbol_by_value_Type(4) -> get;
enum_symbol_by_value_Type(5) -> send;
enum_symbol_by_value_Type(6) -> quit;
enum_symbol_by_value_Type(7) -> reply;
enum_symbol_by_value_Type(8) -> new_peer;
enum_symbol_by_value_Type(9) -> peer_left;
enum_symbol_by_value_Type(10) -> newServer.


enum_value_by_symbol_Type(register) -> 0;
enum_value_by_symbol_Type(login) -> 1;
enum_value_by_symbol_Type(loginReply) -> 2;
enum_value_by_symbol_Type(create) -> 3;
enum_value_by_symbol_Type(get) -> 4;
enum_value_by_symbol_Type(send) -> 5;
enum_value_by_symbol_Type(quit) -> 6;
enum_value_by_symbol_Type(reply) -> 7;
enum_value_by_symbol_Type(new_peer) -> 8;
enum_value_by_symbol_Type(peer_left) -> 9;
enum_value_by_symbol_Type(newServer) -> 10.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ServerInfo">>) -> 'ServerInfo';
fqbin_to_msg_name(<<"registerLoginFormat">>) -> registerLoginFormat;
fqbin_to_msg_name(<<"album">>) -> album;
fqbin_to_msg_name(<<"reply_message">>) -> reply_message;
fqbin_to_msg_name(<<"login_reply">>) -> login_reply;
fqbin_to_msg_name(<<"voteValue">>) -> voteValue;
fqbin_to_msg_name(<<"voteMap">>) -> voteMap;
fqbin_to_msg_name(<<"peerInfo">>) -> peerInfo;
fqbin_to_msg_name(<<"newPeer">>) -> newPeer;
fqbin_to_msg_name(<<"dotPair">>) -> dotPair;
fqbin_to_msg_name(<<"voteInfo">>) -> voteInfo;
fqbin_to_msg_name(<<"fileInfo">>) -> fileInfo;
fqbin_to_msg_name(<<"groupInfo">>) -> groupInfo;
fqbin_to_msg_name(<<"crdt">>) -> crdt;
fqbin_to_msg_name(<<"sessionStart">>) -> sessionStart;
fqbin_to_msg_name(<<"quitMessage">>) -> quitMessage;
fqbin_to_msg_name(<<"Message">>) -> 'Message';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ServerInfo') -> <<"ServerInfo">>;
msg_name_to_fqbin(registerLoginFormat) -> <<"registerLoginFormat">>;
msg_name_to_fqbin(album) -> <<"album">>;
msg_name_to_fqbin(reply_message) -> <<"reply_message">>;
msg_name_to_fqbin(login_reply) -> <<"login_reply">>;
msg_name_to_fqbin(voteValue) -> <<"voteValue">>;
msg_name_to_fqbin(voteMap) -> <<"voteMap">>;
msg_name_to_fqbin(peerInfo) -> <<"peerInfo">>;
msg_name_to_fqbin(newPeer) -> <<"newPeer">>;
msg_name_to_fqbin(dotPair) -> <<"dotPair">>;
msg_name_to_fqbin(voteInfo) -> <<"voteInfo">>;
msg_name_to_fqbin(fileInfo) -> <<"fileInfo">>;
msg_name_to_fqbin(groupInfo) -> <<"groupInfo">>;
msg_name_to_fqbin(crdt) -> <<"crdt">>;
msg_name_to_fqbin(sessionStart) -> <<"sessionStart">>;
msg_name_to_fqbin(quitMessage) -> <<"quitMessage">>;
msg_name_to_fqbin('Message') -> <<"Message">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"Type">>) -> 'Type';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Type') -> <<"Type">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "message.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["message.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["message"].


get_msg_containment("message") -> ['Message', 'ServerInfo', album, crdt, dotPair, fileInfo, groupInfo, login_reply, newPeer, peerInfo, quitMessage, registerLoginFormat, reply_message, sessionStart, voteInfo, voteMap, voteValue];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("message") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("message") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("message") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("message") -> ['Type'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"voteMap">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"newPeer">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"dotPair">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"sessionStart">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"registerLoginFormat">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"crdt">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"voteValue">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"reply_message">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"quitMessage">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"Message">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"login_reply">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"album">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"voteInfo">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"peerInfo">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"groupInfo">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"fileInfo">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"ServerInfo">>) -> "message";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Type">>) -> "message";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "git".
